"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY", default="django-insecure-change-this-in-production")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third party apps
    "graphene_django",
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    "graphql_auth",
    # local apps
    "accounts",
    "products",
    "orders",
    "reviews",
    "messaging",
    "analytics",
    "security",
    "notifications",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "src.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "src.wsgi.application"
ASGI_APPLICATION = "src.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}



AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "graphql_auth.backends.GraphQLAuthBackend",
    "django.contrib.auth.backends.ModelBackend",
    # "social_core.backends.google.GoogleOAuth",
    # "social_core.backends.facebook.FacebookOAuth2",
]

DEFAULT_FROM_EMAIL = "VoltisLab Academy <no-reply@vmodel.app>"
EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"
ANYMAIL = {
    "MAILJET_API_KEY": config("MAILJET_API_KEY", default=""),
    "MAILJET_SECRET_KEY": config("MAILJET_SECRET_KEY", default=""),
}

JWT_REFRESH_TOKEN_MODEL = "graphql_jwt.refresh_token.models.RefreshToken"

GRAPHENE = {
    "SCHEMA": "src.schemas.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
        "src.middleware.JWTBlacklistMiddleware",
    ],
}

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=30),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=90),
    "JWT_ALLOW_ANY_CLASSES": [
        "src.schemas.NewRegister",
        "src.schemas.NewObtainJSONWebToken",  # Login
        "graphql_jwt.mutations.Refresh",
        "graphql_jwt.mutations.Verify",
        # "graphql_auth.mutations.ResendActivationEmail",
        "graphql_auth.mutations.PasswordReset",
    ],
}

GRAPHQL_AUTH = {
    "SEND_ACTIVATION_EMAIL": False,
    "REGISTER_MUTATION_FIELDS": {
        "email": "String",
        "first_name": "String",
        "last_name": "String",
        "account_type": "String",
        "terms_accepted": "Boolean",
    },
    "ALLOW_LOGIN_NOT_VERIFIED": config(
        "ALLOW_LOGIN_NOT_VERIFIED", default=True, cast=bool
    ),
}



FORCE_SCRIPT_NAME = "/wms"

STATIC_URL = f"{FORCE_SCRIPT_NAME}/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_USER_MODEL = "accounts.User"


AWS_SERVER_PUBLIC_KEY = config("AWS_SERVER_PUBLIC_KEY", default="")
AWS_SERVER_SECRET_KEY = config("AWS_SERVER_SECRET_KEY", default="")
AWS_SERVER_REGION_NAME = config("AWS_SERVER_REGION_NAME", default="eu-west-2")


BUCKET = "prelura"
# Upload Types
PROFILE_PICTURE = "PROFILE"
VIDEO = "VIDEO"
RESOURCES = "RESOURCES"
PRODUCT = "PRODUCT"
BANNER = "BANNER"
OUTFEATZ = "OUTFEATZ"

UPLOAD_BASE_URL = f"https://{BUCKET}.s3.eu-west-2.amazonaws.com/"

REDIS_URL = config("REDIS_URL", default="redis://localhost:6379/0")